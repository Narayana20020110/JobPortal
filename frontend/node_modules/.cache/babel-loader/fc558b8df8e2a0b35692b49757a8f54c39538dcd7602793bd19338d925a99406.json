{"ast":null,"code":"import _objectSpread from \"/workspaces/Narayana20020110.github.io/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/workspaces/Narayana20020110.github.io/frontend/src/PostJob.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { api } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostJob = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [job, setJob] = useState({\n    title: \"\",\n    description: \"\",\n    id: generateUniqueId(),\n    email: location.state.email\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setJob(_objectSpread(_objectSpread({}, job), {}, {\n      [name]: value\n    }));\n  };\n  async function generateUniqueId() {\n    try {\n      // Fetch existing IDs from the database\n      const response = await fetch(\"\".concat(api, \"/jobs\"));\n      const existingIds = response.data; // Assuming the API returns an array of IDs\n\n      let newId;\n      do {\n        // Generate a random ID\n        newId = Math.floor(Math.random() * 10); // Adjust range as needed\n      } while (existingIds.includes(newId)); // Check if the ID already exists\n\n      return newId;\n    } catch (error) {\n      console.error(\"Error fetching IDs:\", error);\n      throw new Error(\"Unable to generate unique ID\");\n    }\n  }\n  const handleSubmit = () => {\n    fetch(\"\".concat(api, \"/post-job\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(job)\n    }).then(() => {\n      console.log(typeof job);\n      navigate(\"/JobsDashboard\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Post a Job\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"title\",\n      placeholder: \"Job Title\",\n      value: job.title,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"description\",\n      placeholder: \"Job Description\",\n      value: job.description,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(PostJob, \"or+MgOyH/978m6V34xs2VVXzBZs=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = PostJob;\nexport default PostJob;\nvar _c;\n$RefreshReg$(_c, \"PostJob\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","api","jsxDEV","_jsxDEV","PostJob","_s","navigate","location","job","setJob","title","description","id","generateUniqueId","email","state","handleChange","e","name","value","target","_objectSpread","response","fetch","concat","existingIds","data","newId","Math","floor","random","includes","error","console","Error","handleSubmit","method","headers","body","JSON","stringify","then","log","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Narayana20020110.github.io/frontend/src/PostJob.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport { api } from \"./App\";\nconst PostJob = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [job, setJob] = useState({\n    title: \"\",\n    description: \"\",\n    id: generateUniqueId(),\n    email: location.state.email,\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setJob({ ...job, [name]: value });\n  };\n\n  async function generateUniqueId() {\n    try {\n      // Fetch existing IDs from the database\n      const response = await fetch(`${api}/jobs`);\n      const existingIds = response.data; // Assuming the API returns an array of IDs\n\n      let newId;\n      do {\n        // Generate a random ID\n        newId = Math.floor(Math.random() * 10); // Adjust range as needed\n      } while (existingIds.includes(newId)); // Check if the ID already exists\n\n      return newId;\n    } catch (error) {\n      console.error(\"Error fetching IDs:\", error);\n      throw new Error(\"Unable to generate unique ID\");\n    }\n  }\n  const handleSubmit = () => {\n    fetch(`${api}/post-job`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(job),\n    }).then(() => {\n      console.log(typeof job);\n\n      navigate(\"/JobsDashboard\");\n    });\n  };\n\n  return (\n    <div>\n      <h1>Post a Job</h1>\n      <input\n        type=\"text\"\n        name=\"title\"\n        placeholder=\"Job Title\"\n        value={job.title}\n        onChange={handleChange}\n      />\n      <textarea\n        name=\"description\"\n        placeholder=\"Job Description\"\n        value={job.description}\n        onChange={handleChange}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n};\n\nexport default PostJob;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,GAAG,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC5B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC;IAC7BY,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,EAAE,EAAEC,gBAAgB,CAAC,CAAC;IACtBC,KAAK,EAAEP,QAAQ,CAACQ,KAAK,CAACD;EACxB,CAAC,CAAC;EAEF,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCX,MAAM,CAAAY,aAAA,CAAAA,aAAA,KAAMb,GAAG;MAAE,CAACU,IAAI,GAAGC;IAAK,EAAE,CAAC;EACnC,CAAC;EAED,eAAeN,gBAAgBA,CAAA,EAAG;IAChC,IAAI;MACF;MACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,IAAAC,MAAA,CAAIvB,GAAG,UAAO,CAAC;MAC3C,MAAMwB,WAAW,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;;MAEnC,IAAIC,KAAK;MACT,GAAG;QACD;QACAA,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;MAC1C,CAAC,QAAQL,WAAW,CAACM,QAAQ,CAACJ,KAAK,CAAC,EAAE,CAAC;;MAEvC,OAAOA,KAAK;IACd,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBZ,KAAK,IAAAC,MAAA,CAAIvB,GAAG,gBAAa;MACvBmC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChC,GAAG;IAC1B,CAAC,CAAC,CAACiC,IAAI,CAAC,MAAM;MACZR,OAAO,CAACS,GAAG,CAAC,OAAOlC,GAAG,CAAC;MAEvBF,QAAQ,CAAC,gBAAgB,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAED,oBACEH,OAAA;IAAAwC,QAAA,gBACExC,OAAA;MAAAwC,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB5C,OAAA;MACE6C,IAAI,EAAC,MAAM;MACX9B,IAAI,EAAC,OAAO;MACZ+B,WAAW,EAAC,WAAW;MACvB9B,KAAK,EAAEX,GAAG,CAACE,KAAM;MACjBwC,QAAQ,EAAElC;IAAa;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF5C,OAAA;MACEe,IAAI,EAAC,aAAa;MAClB+B,WAAW,EAAC,iBAAiB;MAC7B9B,KAAK,EAAEX,GAAG,CAACG,WAAY;MACvBuC,QAAQ,EAAElC;IAAa;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACF5C,OAAA;MAAQgD,OAAO,EAAEhB,YAAa;MAAAQ,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAAC1C,EAAA,CAhEID,OAAO;EAAA,QACML,WAAW,EACXC,WAAW;AAAA;AAAAoD,EAAA,GAFxBhD,OAAO;AAkEb,eAAeA,OAAO;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}