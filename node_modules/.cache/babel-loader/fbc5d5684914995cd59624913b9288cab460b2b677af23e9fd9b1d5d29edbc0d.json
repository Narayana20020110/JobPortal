{"ast":null,"code":"var _jsxFileName = \"/workspaces/JobPortal/src/JobsDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { api } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobsDashboard = async profiles => {\n  _s();\n  const [Jobs, setJobs] = useState([]);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const tableBodyRef = useRef(null);\n  const {\n    email\n  } = location.state.email;\n\n  /*useEffect(\n    () => {\n      if (location.state && location.state.job) {\n        //  const { job } = location.state;\n        console.log(location.state);\n        setJobs((preJobs) => [...preJobs, location.state.job]);\n        console.log(Jobs);\n      }\n       /* const addJobToTable = (job) => {\n      console.log(job);\n      const newRow = document.createElement(\"tr\");\n       // Create table cells for job properties\n      const idCell = document.createElement(\"td\");\n      idCell.textContent = job.id;\n       const titleCell = document.createElement(\"td\");\n      titleCell.textContent = job.title;\n       const statusCell = document.createElement(\"td\");\n      statusCell.textContent = job.status;\n       // Append cells to the new row\n      newRow.appendChild(idCell);\n      newRow.appendChild(titleCell);\n      newRow.appendChild(statusCell);\n      console.log(newRow);\n      console.log(\"hi\");\n      // Append the new row to the table body\n      tableBodyRef.current.appendChild(newRow);\n    };\n     addJobToTable({ job });\n      /*  function populateTable() {\n      const tableBody = document.getElementById(\"t-body\");\n      tableBody.innerHTML = \"\"; // Clear existing rows (if any)\n       // Loop through the array and create a row for each job\n      Jobs.forEach((job) => {\n        const row = document.createElement(\"tr\"); // Create a new row\n         // Create and append table cells to the row\n        const cell1 = document.createElement(\"td\");\n        cell1.textContent = job.id; // Job ID\n        row.appendChild(cell1);\n         const cell2 = document.createElement(\"td\");\n        cell2.textContent = job.title; // Job Title\n        row.appendChild(cell2);\n         const cell3 = document.createElement(\"td\");\n         const btn = document.createElement(\"button\");\n        btn.setAttribute(onclick, closeJob(job.id));\n        cell3.appendChild(btn);\n         cell3.textContent = Close; // Job Status\n        row.appendChild(cell3);\n        const cell4 = document.createElement(\"td\");\n        if (job.id == data.JobId) {\n          cell4.textContent = data.length;\n        }\n        row.appendChild(cell4);\n        console.log(job);\n         // Append the row to the table body\n        tableBody.appendChild(row);\n      }); \n    },\n    window.onload = populateTable();\n    [location.state]\n  );*/\n  fetch(\"\".concat(api, \"/jobs-dashboard/\").concat(email)).then(res => res.json()).then(data => setJobs(data));\n  const handlePostJob = () => {\n    navigate(\"/PostJob\", {\n      state: {\n        email\n      }\n    });\n  };\n  const handleMatchedProfiles = () => {\n    navigate(\"/MatchedProfiles\", {\n      state: {\n        Jobs\n      }\n    });\n  };\n  const closeJob = async jobId => {\n    const updatedRows = Jobs.filter(job => job.jobId != jobId);\n    setJobs([updatedRows]);\n    await fetch(\"\".concat(api, \"/delete/\").concat(jobId), {\n      method: \"DELETE\"\n    }).then(() => alert(\"job successfully deleted \"));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jobs Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePostJob,\n      children: \"Post Job\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMatchedProfiles,\n      children: \"Matched Profiles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Matching Profiles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        id: \"t-body\",\n        children: Jobs.map(job => {\n          /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: job.d\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: job.jobTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => closeJob(job.jobId),\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), Array.isArray(profiles) && profiles.map(profile => {\n              if (profile.jobId == job.jobId) {\n                /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: profile.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, job._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(JobsDashboard, \"5vKM5tbs1YM7Csgo7CFVK9m9mhQ=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = JobsDashboard;\nexport default JobsDashboard;\nvar _c;\n$RefreshReg$(_c, \"JobsDashboard\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","useLocation","api","jsxDEV","_jsxDEV","JobsDashboard","profiles","_s","Jobs","setJobs","navigate","location","tableBodyRef","email","state","fetch","concat","then","res","json","data","handlePostJob","handleMatchedProfiles","closeJob","jobId","updatedRows","filter","job","method","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","id","map","d","jobTitle","Array","isArray","profile","length","_id","_c","$RefreshReg$"],"sources":["/workspaces/JobPortal/src/JobsDashboard.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { api } from \"./App\";\nconst JobsDashboard = async (profiles) => {\n  const [Jobs, setJobs] = useState([]);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const tableBodyRef = useRef(null);\n  const { email } = location.state.email;\n\n  /*useEffect(\n    () => {\n      if (location.state && location.state.job) {\n        //  const { job } = location.state;\n        console.log(location.state);\n        setJobs((preJobs) => [...preJobs, location.state.job]);\n        console.log(Jobs);\n      }\n\n      /* const addJobToTable = (job) => {\n      console.log(job);\n      const newRow = document.createElement(\"tr\");\n\n      // Create table cells for job properties\n      const idCell = document.createElement(\"td\");\n      idCell.textContent = job.id;\n\n      const titleCell = document.createElement(\"td\");\n      titleCell.textContent = job.title;\n\n      const statusCell = document.createElement(\"td\");\n      statusCell.textContent = job.status;\n\n      // Append cells to the new row\n      newRow.appendChild(idCell);\n      newRow.appendChild(titleCell);\n      newRow.appendChild(statusCell);\n      console.log(newRow);\n      console.log(\"hi\");\n      // Append the new row to the table body\n      tableBodyRef.current.appendChild(newRow);\n    };\n\n    addJobToTable({ job });\n      /*  function populateTable() {\n      const tableBody = document.getElementById(\"t-body\");\n      tableBody.innerHTML = \"\"; // Clear existing rows (if any)\n\n      // Loop through the array and create a row for each job\n      Jobs.forEach((job) => {\n        const row = document.createElement(\"tr\"); // Create a new row\n\n        // Create and append table cells to the row\n        const cell1 = document.createElement(\"td\");\n        cell1.textContent = job.id; // Job ID\n        row.appendChild(cell1);\n\n        const cell2 = document.createElement(\"td\");\n        cell2.textContent = job.title; // Job Title\n        row.appendChild(cell2);\n\n        const cell3 = document.createElement(\"td\");\n\n        const btn = document.createElement(\"button\");\n        btn.setAttribute(onclick, closeJob(job.id));\n        cell3.appendChild(btn);\n\n        cell3.textContent = Close; // Job Status\n        row.appendChild(cell3);\n        const cell4 = document.createElement(\"td\");\n        if (job.id == data.JobId) {\n          cell4.textContent = data.length;\n        }\n        row.appendChild(cell4);\n        console.log(job);\n\n        // Append the row to the table body\n        tableBody.appendChild(row);\n      }); \n    },\n    window.onload = populateTable();\n    [location.state]\n  );*/\n  fetch(`${api}/jobs-dashboard/${email}`).then((res)=>res.json()).then((data) => setJobs(data));\n\n  const handlePostJob = () => {\n    navigate(\"/PostJob\", { state: { email } });\n  };\n  const handleMatchedProfiles = () => {\n    navigate(\"/MatchedProfiles\", { state: { Jobs } });\n  };\n  const closeJob = async (jobId) => {\n    const updatedRows = Jobs.filter((job) => job.jobId != jobId);\n    setJobs([updatedRows]);\n    await fetch(`${api}/delete/${jobId}`, { method: \"DELETE\" }).then(() =>\n      alert(\"job successfully deleted \")\n    );\n  };\n  return (\n    <div>\n      <h1>Jobs Dashboard</h1>\n      <button onClick={handlePostJob}>Post Job</button>\n      <button onClick={handleMatchedProfiles}>Matched Profiles</button>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Job ID</th>\n            <th>Job Title</th>\n            <th>Status</th>\n            <th>Matching Profiles</th>\n          </tr>\n        </thead>\n        <tbody id=\"t-body\">\n          {Jobs.map((job) => {\n            <tr key={job._id}>\n              <td>{job.d}</td>\n              <td>{job.jobTitle}</td>\n              <td>\n                <button onClick={() => closeJob(job.jobId)}>Close</button>\n              </td>\n              {Array.isArray(profiles) &&\n                profiles.map((profile) => {\n                  if (profile.jobId == job.jobId) {\n                    <td>{profile.length}</td>;\n                  }\n                })}\n            </tr>;\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default JobsDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}