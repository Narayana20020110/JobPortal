{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import{api}from\"./App\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const JobsDashboard=async profiles=>{const[Jobs,setJobs]=useState([]);const navigate=useNavigate();const location=useLocation();const tableBodyRef=useRef(null);const{email}=location.state.email;/*useEffect(\n    () => {\n      if (location.state && location.state.job) {\n        //  const { job } = location.state;\n        console.log(location.state);\n        setJobs((preJobs) => [...preJobs, location.state.job]);\n        console.log(Jobs);\n      }\n\n      /* const addJobToTable = (job) => {\n      console.log(job);\n      const newRow = document.createElement(\"tr\");\n\n      // Create table cells for job properties\n      const idCell = document.createElement(\"td\");\n      idCell.textContent = job.id;\n\n      const titleCell = document.createElement(\"td\");\n      titleCell.textContent = job.title;\n\n      const statusCell = document.createElement(\"td\");\n      statusCell.textContent = job.status;\n\n      // Append cells to the new row\n      newRow.appendChild(idCell);\n      newRow.appendChild(titleCell);\n      newRow.appendChild(statusCell);\n      console.log(newRow);\n      console.log(\"hi\");\n      // Append the new row to the table body\n      tableBodyRef.current.appendChild(newRow);\n    };\n    addJobToTable({ job });\n      /*  function populateTable() {\n      const tableBody = document.getElementById(\"t-body\");\n      tableBody.innerHTML = \"\"; // Clear existing rows (if any)\n\n      // Loop through the array and create a row for each job\n      Jobs.forEach((job) => {\n        const row = document.createElement(\"tr\"); // Create a new row\n\n        // Create and append table cells to the row\n        const cell1 = document.createElement(\"td\");\n        cell1.textContent = job.id; // Job ID\n        row.appendChild(cell1);\n\n        const cell2 = document.createElement(\"td\");\n        cell2.textContent = job.title; // Job Title\n        row.appendChild(cell2);\n\n        const cell3 = document.createElement(\"td\");\n\n        const btn = document.createElement(\"button\");\n        btn.setAttribute(onclick, closeJob(job.id));\n        cell3.appendChild(btn);\n\n        cell3.textContent = Close; // Job Status\n        row.appendChild(cell3);\n        const cell4 = document.createElement(\"td\");\n        if (job.id == data.JobId) {\n          cell4.textContent = data.length;\n        }\n        row.appendChild(cell4);\n        console.log(job);\n\n        // Append the row to the table body\n        tableBody.appendChild(row);\n      }); \n    },\n    window.onload = populateTable();\n    [location.state]\n  );*/fetch(\"\".concat(api,\"/jobs-dashboard/\").concat(email)).then(res=>setJobs(res.data));const handlePostJob=()=>{navigate(\"/PostJob\",{state:{email}});};const handleMatchedProfiles=()=>{navigate(\"/MatchedProfiles\",{state:{Jobs}});};const closeJob=async jobId=>{const updatedRows=Jobs.filter(job=>job.jobId!=jobId);setJobs([updatedRows]);await fetch(\"\".concat(api,\"/delete/\").concat(jobId),{method:\"DELETE\"}).then(()=>alert(\"job successfully deleted \"));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Jobs Dashboard\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePostJob,children:\"Post Job\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleMatchedProfiles,children:\"Matched Profiles\"}),/*#__PURE__*/_jsxs(\"table\",{border:\"1\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Job ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Job Title\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Matching Profiles\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{id:\"t-body\",children:Jobs.map(job=>{/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:job.jobId}),/*#__PURE__*/_jsx(\"td\",{children:job.jobTitle}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>closeJob(job.jobId),children:\"Close\"})}),Array.isArray(profiles)&&profiles.map(profile=>{if(profile.jobId==job.jobId){/*#__PURE__*/_jsx(\"td\",{children:profile.length});}})]},job.jobobId);})})]})]});};export default JobsDashboard;","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","useLocation","api","jsx","_jsx","jsxs","_jsxs","JobsDashboard","profiles","Jobs","setJobs","navigate","location","tableBodyRef","email","state","fetch","concat","then","res","data","handlePostJob","handleMatchedProfiles","closeJob","jobId","updatedRows","filter","job","method","alert","children","onClick","border","id","map","jobTitle","Array","isArray","profile","length","jobobId"],"sources":["/workspaces/JobPortal/src/JobsDashboard.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { api } from \"./App\";\nconst JobsDashboard = async (profiles) => {\n  const [Jobs, setJobs] = useState([]);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const tableBodyRef = useRef(null);\n  const { email } = location.state.email;\n\n  /*useEffect(\n    () => {\n      if (location.state && location.state.job) {\n        //  const { job } = location.state;\n        console.log(location.state);\n        setJobs((preJobs) => [...preJobs, location.state.job]);\n        console.log(Jobs);\n      }\n\n      /* const addJobToTable = (job) => {\n      console.log(job);\n      const newRow = document.createElement(\"tr\");\n\n      // Create table cells for job properties\n      const idCell = document.createElement(\"td\");\n      idCell.textContent = job.id;\n\n      const titleCell = document.createElement(\"td\");\n      titleCell.textContent = job.title;\n\n      const statusCell = document.createElement(\"td\");\n      statusCell.textContent = job.status;\n\n      // Append cells to the new row\n      newRow.appendChild(idCell);\n      newRow.appendChild(titleCell);\n      newRow.appendChild(statusCell);\n      console.log(newRow);\n      console.log(\"hi\");\n      // Append the new row to the table body\n      tableBodyRef.current.appendChild(newRow);\n    };\n    addJobToTable({ job });\n      /*  function populateTable() {\n      const tableBody = document.getElementById(\"t-body\");\n      tableBody.innerHTML = \"\"; // Clear existing rows (if any)\n\n      // Loop through the array and create a row for each job\n      Jobs.forEach((job) => {\n        const row = document.createElement(\"tr\"); // Create a new row\n\n        // Create and append table cells to the row\n        const cell1 = document.createElement(\"td\");\n        cell1.textContent = job.id; // Job ID\n        row.appendChild(cell1);\n\n        const cell2 = document.createElement(\"td\");\n        cell2.textContent = job.title; // Job Title\n        row.appendChild(cell2);\n\n        const cell3 = document.createElement(\"td\");\n\n        const btn = document.createElement(\"button\");\n        btn.setAttribute(onclick, closeJob(job.id));\n        cell3.appendChild(btn);\n\n        cell3.textContent = Close; // Job Status\n        row.appendChild(cell3);\n        const cell4 = document.createElement(\"td\");\n        if (job.id == data.JobId) {\n          cell4.textContent = data.length;\n        }\n        row.appendChild(cell4);\n        console.log(job);\n\n        // Append the row to the table body\n        tableBody.appendChild(row);\n      }); \n    },\n    window.onload = populateTable();\n    [location.state]\n  );*/\n  fetch(`${api}/jobs-dashboard/${email}`).then((res) => setJobs(res.data));\n\n  const handlePostJob = () => {\n    navigate(\"/PostJob\", { state: { email } });\n  };\n  const handleMatchedProfiles = () => {\n    navigate(\"/MatchedProfiles\", { state: { Jobs } });\n  };\n  const closeJob = async (jobId) => {\n    const updatedRows = Jobs.filter((job) => job.jobId != jobId);\n    setJobs([updatedRows]);\n    await fetch(`${api}/delete/${jobId}`, { method: \"DELETE\" }).then(() =>\n      alert(\"job successfully deleted \")\n    );\n  };\n  return (\n    <div>\n      <h1>Jobs Dashboard</h1>\n      <button onClick={handlePostJob}>Post Job</button>\n      <button onClick={handleMatchedProfiles}>Matched Profiles</button>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Job ID</th>\n            <th>Job Title</th>\n            <th>Status</th>\n            <th>Matching Profiles</th>\n          </tr>\n        </thead>\n        <tbody id=\"t-body\">\n          {Jobs.map((job) => {\n            <tr key={job.jobobId}>\n              <td>{job.jobId}</td>\n              <td>{job.jobTitle}</td>\n              <td>\n                <button onClick={() => closeJob(job.jobId)}>Close</button>\n              </td>\n              {Array.isArray(profiles) &&\n                profiles.map((profile) => {\n                  if (profile.jobId == job.jobId) {\n                    <td>{profile.length}</td>;\n                  }\n                })}\n            </tr>;\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default JobsDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}