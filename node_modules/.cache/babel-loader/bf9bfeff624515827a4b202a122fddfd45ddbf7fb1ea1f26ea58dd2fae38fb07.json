{"ast":null,"code":"import _objectSpread from \"/workspaces/JobPortal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/workspaces/JobPortal/src/UserPasswordReset.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./PasswordReset.css\";\nimport { api } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserPasswordReset() {\n  _s();\n  const [passwords, setPasswords] = useState({\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n  const location = useLocation();\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (passwords.newPassword !== passwords.confirmPassword) {\n      alert(\"Passwords do not match!\");\n      return;\n    }\n    try {\n      const res = await fetch(\"\".concat(api, \"/user/password-reset\"), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(_objectSpread({\n          email: location.state.email\n        }, passwords.confirmPassword))\n      });\n      if (res.status == 200) {\n        navigate(\"/UserLogin\");\n      }\n    } catch (error) {\n      console.error(\"Password reset failed:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"password-reset-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"New Password\",\n        value: passwords.newPassword,\n        onChange: e => setPasswords(_objectSpread(_objectSpread({}, passwords), {}, {\n          newPassword: e.target.value\n        })),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        value: passwords.confirmPassword,\n        onChange: e => setPasswords(_objectSpread(_objectSpread({}, passwords), {}, {\n          confirmPassword: e.target.value\n        })),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(UserPasswordReset, \"oh5ydL6kSF0oZHvpLtd3Hwy3cYQ=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = UserPasswordReset;\nexport default UserPasswordReset;\nvar _c;\n$RefreshReg$(_c, \"UserPasswordReset\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","api","jsxDEV","_jsxDEV","UserPasswordReset","_s","passwords","setPasswords","newPassword","confirmPassword","location","navigate","handleSubmit","e","preventDefault","alert","res","fetch","concat","method","headers","body","JSON","stringify","_objectSpread","email","state","status","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/workspaces/JobPortal/src/UserPasswordReset.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./PasswordReset.css\";\nimport { api } from \"./App\";\nfunction UserPasswordReset() {\n  const [passwords, setPasswords] = useState({\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (passwords.newPassword !== passwords.confirmPassword) {\n      alert(\"Passwords do not match!\");\n      return;\n    }\n    try {\n      const res = await fetch(`${api}/user/password-reset`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: location.state.email,\n          ...passwords.confirmPassword,\n        }),\n      });\n      if (res.status == 200) {\n        navigate(\"/UserLogin\");\n      }\n    } catch (error) {\n      console.error(\"Password reset failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"password-reset-container\">\n      <h2>Reset Password</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"password\"\n          placeholder=\"New Password\"\n          value={passwords.newPassword}\n          onChange={(e) =>\n            setPasswords({ ...passwords, newPassword: e.target.value })\n          }\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          value={passwords.confirmPassword}\n          onChange={(e) =>\n            setPasswords({ ...passwords, confirmPassword: e.target.value })\n          }\n          required\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default UserPasswordReset;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}