{"ast":null,"code":"import _objectSpread from\"/workspaces/JobPortal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from\"react\";import{useLocation,useNavigate}from\"react-router-dom\";import\"./PasswordReset.css\";import{api}from\"./App\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CompPasswordReset(){const[passwords,setPasswords]=useState({newPassword:\"\",confirmPassword:\"\"});const location=useLocation();const navigate=useNavigate();const handleSubmit=async e=>{e.preventDefault();if(passwords.newPassword!==passwords.confirmPassword){alert(\"Passwords do not match!\");return;}try{const res=await fetch(\"\".concat(api,\"/company/password-reset\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(_objectSpread({email:location.state.email},passwords.confirmPassword))});if(res.status==200){navigate(\"/CompanyLogin\");}}catch(error){console.error(\"Password reset failed:\",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"password-reset-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Reset Password\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"New Password\",value:passwords.newPassword,onChange:e=>setPasswords(_objectSpread(_objectSpread({},passwords),{},{newPassword:e.target.value})),required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Confirm Password\",value:passwords.confirmPassword,onChange:e=>setPasswords(_objectSpread(_objectSpread({},passwords),{},{confirmPassword:e.target.value})),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]})]});}export default CompPasswordReset;","map":{"version":3,"names":["React","useState","useLocation","useNavigate","api","jsx","_jsx","jsxs","_jsxs","CompPasswordReset","passwords","setPasswords","newPassword","confirmPassword","location","navigate","handleSubmit","e","preventDefault","alert","res","fetch","concat","method","headers","body","JSON","stringify","_objectSpread","email","state","status","error","console","className","children","onSubmit","type","placeholder","value","onChange","target","required"],"sources":["/workspaces/JobPortal/src/CompPasswordReset.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport \"./PasswordReset.css\";\nimport { api } from \"./App\";\nfunction CompPasswordReset() {\n  const [passwords, setPasswords] = useState({\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (passwords.newPassword !== passwords.confirmPassword) {\n      alert(\"Passwords do not match!\");\n      return;\n    }\n    try {\n      const res = await fetch(`${api}/company/password-reset`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: location.state.email,\n          ...passwords.confirmPassword,\n        }),\n      });\n      if (res.status == 200) {\n        navigate(\"/CompanyLogin\");\n      }\n    } catch (error) {\n      console.error(\"Password reset failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"password-reset-container\">\n      <h2>Reset Password</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"password\"\n          placeholder=\"New Password\"\n          value={passwords.newPassword}\n          onChange={(e) =>\n            setPasswords({ ...passwords, newPassword: e.target.value })\n          }\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          value={passwords.confirmPassword}\n          onChange={(e) =>\n            setPasswords({ ...passwords, confirmPassword: e.target.value })\n          }\n          required\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CompPasswordReset;\n"],"mappings":"0GAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAEvC,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAC3D,MAAO,qBAAqB,CAC5B,OAASC,GAAG,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAC5B,QAAS,CAAAC,iBAAiBA,CAAA,CAAG,CAC3B,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,CACzCW,WAAW,CAAE,EAAE,CACfC,eAAe,CAAE,EACnB,CAAC,CAAC,CACF,KAAM,CAAAC,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAa,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAa,YAAY,CAAG,KAAO,CAAAC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAIR,SAAS,CAACE,WAAW,GAAKF,SAAS,CAACG,eAAe,CAAE,CACvDM,KAAK,CAAC,yBAAyB,CAAC,CAChC,OACF,CACA,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIlB,GAAG,4BAA2B,CACvDmB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAAC,aAAA,EAClBC,KAAK,CAAEf,QAAQ,CAACgB,KAAK,CAACD,KAAK,EACxBnB,SAAS,CAACG,eAAe,CAC7B,CACH,CAAC,CAAC,CACF,GAAIO,GAAG,CAACW,MAAM,EAAI,GAAG,CAAE,CACrBhB,QAAQ,CAAC,eAAe,CAAC,CAC3B,CACF,CAAE,MAAOiB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CAAC,CAED,mBACExB,KAAA,QAAK0B,SAAS,CAAC,0BAA0B,CAAAC,QAAA,eACvC7B,IAAA,OAAA6B,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvB3B,KAAA,SAAM4B,QAAQ,CAAEpB,YAAa,CAAAmB,QAAA,eAC3B7B,IAAA,UACE+B,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,cAAc,CAC1BC,KAAK,CAAE7B,SAAS,CAACE,WAAY,CAC7B4B,QAAQ,CAAGvB,CAAC,EACVN,YAAY,CAAAiB,aAAA,CAAAA,aAAA,IAAMlB,SAAS,MAAEE,WAAW,CAAEK,CAAC,CAACwB,MAAM,CAACF,KAAK,EAAE,CAC3D,CACDG,QAAQ,MACT,CAAC,cACFpC,IAAA,UACE+B,IAAI,CAAC,UAAU,CACfC,WAAW,CAAC,kBAAkB,CAC9BC,KAAK,CAAE7B,SAAS,CAACG,eAAgB,CACjC2B,QAAQ,CAAGvB,CAAC,EACVN,YAAY,CAAAiB,aAAA,CAAAA,aAAA,IAAMlB,SAAS,MAAEG,eAAe,CAAEI,CAAC,CAACwB,MAAM,CAACF,KAAK,EAAE,CAC/D,CACDG,QAAQ,MACT,CAAC,cACFpC,IAAA,WAAQ+B,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAAC,QAAM,CAAQ,CAAC,EACjC,CAAC,EACJ,CAAC,CAEV,CAEA,cAAe,CAAA1B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}