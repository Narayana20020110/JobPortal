{"ast":null,"code":"import _objectSpread from\"/workspaces/JobPortal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import{api}from\"./App\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PostJob=()=>{const navigate=useNavigate();const location=useLocation();const[job,setJob]=useState({title:\"\",description:\"\",id:generateUniqueId(),email:location.state.email});const handleChange=e=>{const{name,value}=e.target;setJob(_objectSpread(_objectSpread({},job),{},{[name]:value}));};async function generateUniqueId(){try{// Fetch existing IDs from the database\nconst response=await fetch(\"\".concat(api,\"/jobs\"));const existingIds=response.data;// Assuming the API returns an array of IDs\nlet newId;do{// Generate a random ID\nnewId=Math.floor(Math.random()*10);// Adjust range as needed\n}while(existingIds.includes(newId));// Check if the ID already exists\nreturn newId;}catch(error){console.error(\"Error fetching IDs:\",error);throw new Error(\"Unable to generate unique ID\");}}const handleSubmit=()=>{fetch(\"\".concat(api,\"/post-job\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(job)}).then(()=>{console.log(typeof job);navigate(\"/JobsDashboard\");});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Post a Job\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"title\",placeholder:\"Job Title\",value:job.title,onChange:handleChange}),/*#__PURE__*/_jsx(\"textarea\",{name:\"description\",placeholder:\"Job Description\",value:job.description,onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmit,children:\"Submit\"})]});};export default PostJob;","map":{"version":3,"names":["React","useState","useNavigate","useLocation","api","jsx","_jsx","jsxs","_jsxs","PostJob","navigate","location","job","setJob","title","description","id","generateUniqueId","email","state","handleChange","e","name","value","target","_objectSpread","response","fetch","concat","existingIds","data","newId","Math","floor","random","includes","error","console","Error","handleSubmit","method","headers","body","JSON","stringify","then","log","children","type","placeholder","onChange","onClick"],"sources":["/workspaces/JobPortal/src/PostJob.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport { api } from \"./App\";\nconst PostJob = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [job, setJob] = useState({\n    title: \"\",\n    description: \"\",\n    id: generateUniqueId(),\n    email: location.state.email,\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setJob({ ...job, [name]: value });\n  };\n\n  async function generateUniqueId() {\n    try {\n      // Fetch existing IDs from the database\n      const response = await fetch(`${api}/jobs`);\n      const existingIds = response.data; // Assuming the API returns an array of IDs\n\n      let newId;\n      do {\n        // Generate a random ID\n        newId = Math.floor(Math.random() * 10); // Adjust range as needed\n      } while (existingIds.includes(newId)); // Check if the ID already exists\n\n      return newId;\n    } catch (error) {\n      console.error(\"Error fetching IDs:\", error);\n      throw new Error(\"Unable to generate unique ID\");\n    }\n  }\n  const handleSubmit = () => {\n    fetch(`${api}/post-job`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(job),\n    }).then(() => {\n      console.log(typeof job);\n\n      navigate(\"/JobsDashboard\");\n    });\n  };\n\n  return (\n    <div>\n      <h1>Post a Job</h1>\n      <input\n        type=\"text\"\n        name=\"title\"\n        placeholder=\"Job Title\"\n        value={job.title}\n        onChange={handleChange}\n      />\n      <textarea\n        name=\"description\"\n        placeholder=\"Job Description\"\n        value={job.description}\n        onChange={handleChange}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n};\n\nexport default PostJob;\n"],"mappings":"0GAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAE3D,OAASC,GAAG,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAC5B,KAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAC,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAS,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACS,GAAG,CAAEC,MAAM,CAAC,CAAGZ,QAAQ,CAAC,CAC7Ba,KAAK,CAAE,EAAE,CACTC,WAAW,CAAE,EAAE,CACfC,EAAE,CAAEC,gBAAgB,CAAC,CAAC,CACtBC,KAAK,CAAEP,QAAQ,CAACQ,KAAK,CAACD,KACxB,CAAC,CAAC,CAEF,KAAM,CAAAE,YAAY,CAAIC,CAAC,EAAK,CAC1B,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChCX,MAAM,CAAAY,aAAA,CAAAA,aAAA,IAAMb,GAAG,MAAE,CAACU,IAAI,EAAGC,KAAK,EAAE,CAAC,CACnC,CAAC,CAED,cAAe,CAAAN,gBAAgBA,CAAA,CAAG,CAChC,GAAI,CACF;AACA,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIxB,GAAG,SAAO,CAAC,CAC3C,KAAM,CAAAyB,WAAW,CAAGH,QAAQ,CAACI,IAAI,CAAE;AAEnC,GAAI,CAAAC,KAAK,CACT,EAAG,CACD;AACAA,KAAK,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAE;AAC1C,CAAC,MAAQL,WAAW,CAACM,QAAQ,CAACJ,KAAK,CAAC,EAAG;AAEvC,MAAO,CAAAA,KAAK,CACd,CAAE,MAAOK,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,IAAI,CAAAE,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACF,CACA,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzBZ,KAAK,IAAAC,MAAA,CAAIxB,GAAG,cAAa,CACvBoC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAChC,GAAG,CAC1B,CAAC,CAAC,CAACiC,IAAI,CAAC,IAAM,CACZR,OAAO,CAACS,GAAG,CAAC,MAAO,CAAAlC,GAAG,CAAC,CAEvBF,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,CAAC,CACJ,CAAC,CAED,mBACEF,KAAA,QAAAuC,QAAA,eACEzC,IAAA,OAAAyC,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBzC,IAAA,UACE0C,IAAI,CAAC,MAAM,CACX1B,IAAI,CAAC,OAAO,CACZ2B,WAAW,CAAC,WAAW,CACvB1B,KAAK,CAAEX,GAAG,CAACE,KAAM,CACjBoC,QAAQ,CAAE9B,YAAa,CACxB,CAAC,cACFd,IAAA,aACEgB,IAAI,CAAC,aAAa,CAClB2B,WAAW,CAAC,iBAAiB,CAC7B1B,KAAK,CAAEX,GAAG,CAACG,WAAY,CACvBmC,QAAQ,CAAE9B,YAAa,CACxB,CAAC,cACFd,IAAA,WAAQ6C,OAAO,CAAEZ,YAAa,CAAAQ,QAAA,CAAC,QAAM,CAAQ,CAAC,EAC3C,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}